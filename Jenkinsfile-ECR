@Library('my-shared-lib') _

pipeline {
    agent any 

    parameters {
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'awsAccountID', description: "AWS Account ID", defaultValue: '133078494918')
        string(name: 'region', description: "Region of ECR", defaultValue: 'ap-south-1')
        string(name: 'ecrRepoName', description: "Name of the ECR", defaultValue: 'mohamedrafi')
    }  
        stages {

            stage('Git CheckOut') {
                when { expression {  params.action == 'create' } }
                steps{
                gitCheckout(
                    branch: 'main', 
                    url: 'https://github.com/mohamedrafi13/mrdevops_java_app.git'
                    )
                }
            }
                                
           stage('Unit Test Maven') {
                when { expression { params.action == 'create' } }
                steps{
                    script {
                        mvnTest()
                    }
                }
            }   
             stage('Integration Test Maven') {
                when { expression { params.action == 'create' } } 
                steps{
                    script {
                        mvnIntegrationTest()
                    }
                }
            }   
            stage('Static Code Analysis: Sonarqube') {
                when { expression { params.action == 'create' } }
                steps{
                    script {
                        def SonarqubeCredentialsId = 'sonarqube'
                        staticCodeAnalysis(SonarqubeCredentialsId)
                    }
                }
            }  
            stage('Quality Gate Analysis: Sonarqube') {
                when { expression { params.action == 'create' } }
                steps{
                    script {
                        def SonarqubeCredentialsId = 'sonarqube'
                        qualityGateCheck(SonarqubeCredentialsId)
                    }
                }
            }    
            stage('Maven Build') {
                when { expression { params.action == 'create' } }
                steps{
                    script {
                        mvnBuild()
                    }
                }
            }    
        /*    stage('Docker Image CleanUp: dockerHub') {
                when { expression { params.action == 'create' } }
                steps{
                    script {
                        dockerImageCleanUp("${params.ImageName}","${params.ImageTag}","${params.dockerhub}" )
                    }
                }
            }*/       
            stage('Docker Build Image') {
                when { expression { params.action == 'create' } }
                steps{
                    script {
                        dockerBuild("${params.awsAccountID}","${params.region}","${params.ecrRepoName}" )
                    }
                }
            }
            stage('Docker Image Scan: ECR Trivy') {
                when { expression { params.action == 'create' } }
                steps{
                    script {
                        dockerImageScan("${params.awsAccountID}","${params.region}","${params.ecrRepoName}" )
                    }
                }
            }   
            stage('Docker Image Push: ECR') {
                when { expression { params.action == 'create' } }
                steps{
                    script {
                        dockerPushImage("${params.awsAccountID}","${params.region}","${params.ecrRepoName}" )
                    }
                }
            }   
           stage('Docker Image CleanUp: ECR') {
                when { expression { params.action == 'create' } }
                steps{
                    script {
                        dockerImageCleanUp("${params.awsAccountID}","${params.region}","${params.ecrRepoName}" )
                    }
                }
            }           
        }
    }